name: Build

on:
  workflow_call:
    inputs: 
      platform:
        required: true
        type: string
      developer-dir:
        required: true
        type: string

env:
    DEVELOPER_DIR: ${{ inputs.developer-dir }}
    PLATFORM: ${{ inputs.platform }}

jobs:
  build-openssl:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Patch Build script
        run: |
          cd td 
          git apply ../builder/tdlib-patches/build-openssl.patch

      - name: Cache Openssl
        id: cache-openssl
        uses: actions/cache@v4
        with:
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          key: openssl-v1-${{ env.PLATFORM }}-${{ hashFiles('td/example/ios/build-openssl.sh', 'td/example/ios/Python-Apple-support.patch', 'builder/tdlib-patches/build-openssl.patch') }}

      - name: Install deps
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: brew install gperf cmake coreutils

      - name: Build Openssl
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
          ./build-openssl.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib:
    runs-on: macos-14
    needs: [build-openssl]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Patch Build
        run: |
          cp builder/tdlib-patches/build.sh td/example/ios

      - name: Cache tdlib
        id: cache-tdlib
        uses: actions/cache@v4
        with:
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          key: tdlib-install-v1-${{ env.PLATFORM }}-${{ hashFiles('td', 'builder/tdlib-patches/build.sh') }}

      - name: Restore ccache cache
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        id: cache-ccache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/ccache
          key: tdlib-ccache-v1-${{ env.PLATFORM }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            tdlib-ccache-v1-${{ env.PLATFORM }}-${{ github.ref }}-
            tdlib-ccache-v1-${{ env.PLATFORM }}-

      - name: Install deps
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        run: brew install gperf cmake coreutils ccache
    
      # - name: Upgrade cmake  # we need 3.28.2 to escape "SDK settings were ignored as 'SDKSettings.json' could not be parsed" on Xcode 14.2 and tvOS
      #   if: env.PLATFORM == 'tvOS'
      #   run: brew update && brew upgrade cmake

      - name: Download Artifacts
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      # Sources are pregenerated in build phase for macOS
      - name: Pregenerate Sources
        if: steps.cache-tdlib.outputs.cache-hit != 'true' && env.PLATFORM  != 'macOS'
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
          if [[ $PLATFORM == "visionOS"* ]]; then
              ./build.sh $PLATFORM ""
          else
              ./build.sh $PLATFORM "$(python3 ../../../scripts/extract_os_version.py ${PLATFORM})"
          fi
          

      - name: Show ccache stats
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        run: ccache -s

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-framework:
    runs-on: macos-14
    needs: [build-tdlib]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v4
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v4
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        run: |
          curl https://mise.run | sh
          export PATH="$HOME/.local/bin:$PATH"
          
          mise install # Installs the tools in .mise.toml
          eval "$(mise activate bash --shims)" # Adds the activated tools to $PATH

          cd builder
          TUIST_PLATFORM=$PLATFORM tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build-framework.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error
