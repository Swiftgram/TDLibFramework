name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # iOS
  build-openssl-iOS:
    runs-on: macos-latest
    env:
      PLATFORM: iOS
    steps:
      - name: Cache Openssl
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          key: openssl-${{ env.PLATFORM }}

      - name: Install deps
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: brew install gperf cmake coreutils

      - name: Checkout
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Patch Build script
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td 
          git apply ../builder/tdlib-patches/build-openssl.patch

      - name: Build Openssl
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
          ./build-openssl.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib-iOS:
    runs-on: macos-latest
    needs: [build-openssl-iOS]
    env:
      PLATFORM: iOS
    steps:
      - name: Install deps
        run: brew install gperf cmake coreutils

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Patch Build script
        run: cp builder/tdlib-patches/build.sh td/example/ios

      - name: Pregenerate Sources
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        run: |
          cd td/example/ios
          ./build.sh $PLATFORM

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib-iOS-simulator:
    runs-on: macos-latest
    needs: [build-openssl-iOS]
    env:
      PLATFORM: iOS-simulator
      PARENT_PLATFORM: iOS
    steps:
      - name: Install deps
        run: brew install gperf cmake coreutils

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PARENT_PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PARENT_PLATFORM }}

      - name: Patch Build script
        run: cp builder/tdlib-patches/build.sh td/example/ios

      - name: Pregenerate Sources
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        run: |
          cd td/example/ios
          ./build.sh $PLATFORM

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-framework-iOS:
    runs-on: macos-latest
    needs: [build-tdlib-iOS]
    env:
      PLATFORM: iOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        working-directory: ./builder
        run: TUIST_PLATFORM=$PLATFORM ../.tuist-bin/tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error

  build-framework-iOS-simulator:
    runs-on: macos-latest
    needs: [build-tdlib-iOS-simulator]
    env:
      PLATFORM: iOS-simulator
      PARENT_PLATFORM: iOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PARENT_PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PARENT_PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        working-directory: ./builder
        run: TUIST_PLATFORM=$PLATFORM ../.tuist-bin/tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error

  # macOS
  build-openssl-macOS:
    runs-on: macos-latest
    env:
      PLATFORM: macOS
    steps:
      - name: Cache Openssl
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          key: openssl-${{ env.PLATFORM }}

      - name: Install deps
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: brew install gperf cmake coreutils

      - name: Checkout
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Patch Build script
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td 
          git apply ../builder/tdlib-patches/build-openssl.patch

      - name: Build Openssl
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
          ./build-openssl.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib-macOS:
    runs-on: macos-latest
    needs: [build-openssl-macOS]
    env:
      PLATFORM: macOS
    steps:
      - name: Install deps
        run: brew install gperf cmake coreutils

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Patch Build script
        run: cp builder/tdlib-patches/build.sh td/example/ios

      # Sources are pregenerated in build phase
      # - name: Pregenerate Sources
      #   run: |
      #     cd td
      #     mkdir native-build
      #     cd native-build
      #     cmake ..
      #     cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        run: |
          cd td/example/ios
          ./build.sh $PLATFORM

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-framework-macOS:
    runs-on: macos-latest
    needs: [build-tdlib-macOS]
    env:
      PLATFORM: macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        working-directory: ./builder
        run: TUIST_PLATFORM=$PLATFORM ../.tuist-bin/tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error

  # watchOS
  build-openssl-watchOS:
    runs-on: macos-latest
    env:
      PLATFORM: watchOS
    steps:
      - name: Cache Openssl
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          key: openssl-${{ env.PLATFORM }}

      - name: Install deps
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: brew install gperf cmake coreutils

      - name: Checkout
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Patch Build script
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td 
          git apply ../builder/tdlib-patches/build-openssl.patch

      - name: Build Openssl
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
          ./build-openssl.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib-watchOS:
    runs-on: macos-latest
    needs: [build-openssl-watchOS]
    env:
      PLATFORM: watchOS
    steps:
      - name: Install deps
        run: brew install gperf cmake coreutils

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Patch Build script
        run: cp builder/tdlib-patches/build.sh td/example/ios

      - name: Pregenerate Sources
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        run: |
          cd td/example/ios
          ./build.sh $PLATFORM

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib-watchOS-simulator:
    runs-on: macos-latest
    needs: [build-openssl-watchOS]
    env:
      PLATFORM: watchOS-simulator
      PARENT_PLATFORM: watchOS
    steps:
      - name: Install deps
        run: brew install gperf cmake coreutils

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PARENT_PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PARENT_PLATFORM }}

      - name: Patch Build script
        run: cp builder/tdlib-patches/build.sh td/example/ios

      - name: Pregenerate Sources
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        run: |
          cd td/example/ios
          ./build.sh $PLATFORM

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-framework-watchOS:
    runs-on: macos-latest
    needs: [build-tdlib-watchOS]
    env:
      PLATFORM: watchOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        working-directory: ./builder
        run: TUIST_PLATFORM=$PLATFORM ../.tuist-bin/tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error

  build-framework-watchOS-simulator:
    runs-on: macos-latest
    needs: [build-tdlib-watchOS-simulator]
    env:
      PLATFORM: watchOS-simulator
      PARENT_PLATFORM: watchOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PARENT_PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PARENT_PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        working-directory: ./builder
        run: TUIST_PLATFORM=$PLATFORM ../.tuist-bin/tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error

  # tvOS
  build-openssl-tvOS:
    runs-on: macos-latest
    env:
      PLATFORM: tvOS
    steps:
      - name: Cache Openssl
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          key: openssl-${{ env.PLATFORM }}

      - name: Install deps
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: brew install gperf cmake coreutils

      - name: Checkout
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Patch Build script
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td 
          git apply ../builder/tdlib-patches/build-openssl.patch

      - name: Build Openssl
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
          ./build-openssl.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib-tvOS:
    runs-on: macos-latest
    needs: [build-openssl-tvOS]
    env:
      PLATFORM: tvOS
    steps:
      - name: Install deps
        run: brew install gperf cmake coreutils

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Patch Build script
        run: cp builder/tdlib-patches/build.sh td/example/ios

      - name: Pregenerate Sources
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        run: |
          cd td/example/ios
          ./build.sh $PLATFORM

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-tdlib-tvOS-simulator:
    runs-on: macos-latest
    needs: [build-openssl-tvOS]
    env:
      PLATFORM: tvOS-simulator
      PARENT_PLATFORM: tvOS
    steps:
      - name: Install deps
        run: brew install gperf cmake coreutils

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PARENT_PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PARENT_PLATFORM }}

      - name: Patch Build script
        run: cp builder/tdlib-patches/build.sh td/example/ios

      - name: Pregenerate Sources
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling

      - name: Build TDLib
        run: |
          cd td/example/ios
          ./build.sh $PLATFORM

      - name: Upload ${{ env.PLATFORM }} install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}
          if-no-files-found: error

  build-framework-tvOS:
    runs-on: macos-latest
    needs: [build-tdlib-tvOS]
    env:
      PLATFORM: tvOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        working-directory: ./builder
        run: TUIST_PLATFORM=$PLATFORM ../.tuist-bin/tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error

  build-framework-tvOS-simulator:
    runs-on: macos-latest
    needs: [build-tdlib-tvOS-simulator]
    env:
      PLATFORM: tvOS-simulator
      PARENT_PLATFORM: tvOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Openssl
        uses: actions/download-artifact@v2
        with:
          name: openssl-${{ env.PARENT_PLATFORM }}
          path: td/example/ios/third_party/openssl/${{ env.PARENT_PLATFORM }}

      - name: Download TDLib ${{ env.PLATFORM }} install
        uses: actions/download-artifact@v2
        with:
          name: tdlib-install-${{ env.PLATFORM }}
          path: td/example/ios/build/install-${{ env.PLATFORM }}

      - name: Patch headers
        working-directory: ./builder
        run: ./patch-headers.sh

      - name: Generate project
        working-directory: ./builder
        run: TUIST_PLATFORM=$PLATFORM ../.tuist-bin/tuist generate

      - name: Build .framework
        working-directory: ./builder
        run: ./build.sh $PLATFORM

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ env.PLATFORM }}
          path: ./builder/build/${{ env.PLATFORM }}.xcarchive
          if-no-files-found: error

  # Merge frameworks
  merge-xcframework:
    runs-on: macos-latest
    needs:
      - build-framework-iOS
      - build-framework-iOS-simulator
      - build-framework-macOS
      - build-framework-watchOS
      - build-framework-watchOS-simulator
      - build-framework-tvOS
      - build-framework-tvOS-simulator
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download iOS Framework
        uses: actions/download-artifact@v2
        with:
          name: xcarchive-iOS
          path: ./builder/build/iOS.xcarchive

      - name: Download iOS-simulator Framework
        uses: actions/download-artifact@v2
        with:
          name: xcarchive-iOS-simulator
          path: ./builder/build/iOS-simulator.xcarchive

      - name: Download macOS Framework
        uses: actions/download-artifact@v2
        with:
          name: xcarchive-macOS
          path: ./builder/build/macOS.xcarchive

      - name: Download watchOS Framework
        
        uses: actions/download-artifact@v2
        with:
          name: xcarchive-watchOS
          path: ./builder/build/watchOS.xcarchive

      - name: Download watchOS-simulator Framework
        uses: actions/download-artifact@v2
        with:
          name: xcarchive-watchOS-simulator
          path: ./builder/build/watchOS-simulator.xcarchive

      - name: Download tvOS Framework
        uses: actions/download-artifact@v2
        with:
          name: xcarchive-tvOS
          path: ./builder/build/tvOS.xcarchive

      - name: Download tvOS-simulator Framework
        uses: actions/download-artifact@v2
        with:
          name: xcarchive-tvOS-simulator
          path: ./builder/build/tvOS-simulator.xcarchive

      - name: Merge Frameworks
        working-directory: ./builder
        run: ./merge-frameworks.sh "iOS iOS-simulator macOS watchOS watchOS-simulator tvOS tvOS-simulator"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: TDLib.xcframework
          path: ./builder/build/TDLib.xcframework
          if-no-files-found: error

  # Tests
  # test-iOS:
  #   runs-on: macos-latest
  #   needs:
  #     - merge-xcframework
  #   steps:
  #     - uses: actions/checkout@v2

  # test-macOS:
  #   runs-on: macos-latest
  #   needs:
  #     - merge-xcframework
  #   steps:
  #     - uses: actions/checkout@v2

  # test-watchOS:
  #   runs-on: macos-latest
  #   needs:
  #     - merge-xcframework
  #   steps:
  #     - uses: actions/checkout@v2

  # test-tvOS:
  #   runs-on: macos-latest
  #   needs:
  #     - merge-xcframework
  #   steps:
  #     - uses: actions/checkout@v2

  # Publish
  # publish:
  #   runs-on: macos-latest
  #   needs:
  #     - merge-xcframework
  #     - test-iOS
  #     - test-macOS
  #     - test-watchOS
  #     - test-tvOS
  #   steps:
  #     - uses: actions/checkout@v2
